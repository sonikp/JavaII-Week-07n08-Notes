1. Introduction to the Swing GUI Framework
2. Sample Swing Application
3. Further Swing Resources

1. Introduction to the Swing GUI Framework

	-DrawControlApp.java
		- simplifies main method
		- highlights the use of inheritance
		- this layout of code puts all the  initialization and control code within the implementation of a draw frame class (ControlFrame that extends JFrame)
		
	-DrawControlPanel.java
	
	- ControlFrame
		- Java shows it is an event driven language by creating an object on the fly to support the ActionListener which is created only when a user selects the "aboutItem" option.
		

		
		/*
		
		icons:
		http://www.small-icons.com/packs/24x24-free-application-icons.htm
		
		Tutorials:
		https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=beginning%20java%20swing%20tutorial
		https://docs.oracle.com/javase/tutorial/uiswing/examples/components/
		
		http://beginnersbook.com/2015/07/java-swing-tutorial/		// completed
		
		http://zetcode.com/tutorials/javaswingtutorial/				
		http://zetcode.com/tutorials/javaswingtutorial/menusandtoolbars/ //ShortCutsEx.java
		
		Need to look at events
		http://zetcode.com/tutorials/javaswingtutorial/swingevents/
		
		Programming Graphical User Interface (GUI)
		http://www3.ntu.edu.sg/home/ehchua/programming/java/j4a_gui.html
		https://www3.ntu.edu.sg/home/ehchua/programming/java/J4a_GUI_2.html
		
		
		https://www.tutorialspoint.com/swing/swing_imageicon.htm
		
		The Java Tutorials: Creating a GUI with JFC.Swing ( The Swing Tutorial )
		http://java.sun.com/docs/books/tutorial/uiswing/
		
		The Swing Tutorial
		http://www.javabeginner.com/java-swing/java-swing-tutorial/
		
		SwingWiki: 
		http://www.swingwiki.org
		
		The SwingSet2 Demo
		<JDK Install Direcroty/demo/jfc/SwingSet2
		
		command line:
		jar xf SwingSet2.jar
		
		*/
		
		
--------------------------------------

Module 5 notes before quiz


Intro to swing GUI framework

JFrame
- highlights use of inheritance
- main method just for the JFrame

JPanel 
- as a visual container

ControlFrame
- majority of code resides here
- ControlFrame extends JFrame, so this is a JFrame
- final = cannot be changed
- Swing components as object fields
- two main panels, (JPanel) main and calc panels
- JLabel, used to display text information to a user
- JButton, can be clicked by user
- mainPanel = BorderLayout
	- BorderLayout lays items out into North,South,East,West
- calcPanel = FlowLayout()
	- FlowLayout lays items out from left 
	to right, wrapping around like words in a sentence
- Layout manager controls how the visual components added to the JPanel will 
be laid out

- set mainPanel to to be out content pane, which is the top-level container of the
JFrame
- JMenu object is a file menu object
- JMenuItem, object that can be added to a JMenu

- Then invokes addActionListener: this registers an "anonymous inner class object"
- this on the fly creates a new class, this is a class that is implementing the
action listener interface which then instantiates the object from the class all in 
one shot. this all happens when invoking the add action listener method. This the registers
the event handler with the about item, which is again a menu item, will have 
registered with it, which will be invoked when the user selects that item.
This demonstrates how Java is an event oriented language
- event dispatch threat controls the display of the gui to the user and the responses to the
user actions 

- when user selects the aboutItem menu, the JOptioPane class launches a message dialog
- A JMenu must be added (registered) with a JMenuBar, which must be added to the JFrame
- JFrame had a setJMenuBar method allowing you to set the JMenuBar for that JFrame

JMenu => JMenuBar => setJMenuBar => JFrame

- validate(); forces the layout manager to perform a fresh layout again
- repaint(); forces any graphics to be freshly rendered

- final: value cannot be changed, 
- the ActionListener event-handling object does not get created until the first time
that the Calculate menu items is selected
- Any local variables that an event-handling object depends upon, must be bound as 
constants by declaring them as final

- but the Swing event-dispatching threat will continue

- there are three main event handing threads in Java:
	- main thread = runs only while the main method is executing
	- garbage collection thread = cleans up after the main thread completes, removing object etc
	- event-dispatch thread = swing thread, continues after main thread terminates.
		- presents the gui to the user
		- responding to the users actions
	- final keyword binds local variables as constants that the event-handling object depends upon
	- ensures these are accessible after main method terminates, and also so they don't
	change during the operation of the program
	
- validate(); refreshes the layout
- repaint(); refreshes the graphics






2?
6?	actionPerformed 
8? EXIT_ON_CLOSE




















